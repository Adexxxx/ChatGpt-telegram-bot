from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message
from ChatGPT import gpt
import sqlite3
import threading
    
TOKEN = 'YOUR_API_KEY'
bot = Bot(TOKEN)            
dp = Dispatcher(bot)


def create_table():                        # –°–æ–∑–¥–∞—ë–º –±–¥, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    connect = sqlite3.connect('gpt_us.db')
    cursor = connect.cursor()

    sql_query = """
                    CREATE TABLE IF NOT EXISTS ChatGPT (
                    id INT,
                    con TEXT,
                    con2 TEXT
                    )
                    """
    cursor.execute(sql_query)
    connect.commit()
    connect.close()    


@dp.message_handler(commands='start')            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(message: Message):
    connect = sqlite3.connect('gpt_us.db')        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
    cursor = connect.cursor()
    sql_query = f"""
                            SELECT * FROM ChatGPT WHERE id = '{int(message.chat.id)}'
                            """
    user = cursor.execute(sql_query).fetchone()
    
    if user == None:        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥. –î–æ–±–∞–≤–ª—è–µ–º
        sql_query = f"INSERT INTO ChatGPT(id, con, con2) VALUES ('{message.from_user.id}', '', '')"
        cursor.execute(sql_query)
         
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —á–∞—Ç-–±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ gpt 3.5üî•\n–ü—Ä–∏—Å—Ç—É–ø–∏–º!')     # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º

    connect.commit()        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–¥
    connect.close()


@dp.message_handler(commands='reset')    # –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –±–¥. 
async def reset(message: Message):    
    connect = sqlite3.connect('gpt_us.db')
    cursor = connect.cursor()
    sql_query = f"UPDATE ChatGPT SET con = '', con2 = '' WHERE id = {message.from_user.id}"
    cursor.execute(sql_query)  
    
    await message.answer('‚úÖ–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—á–∏—â–µ–Ω–∞‚úÖ')
    
    connect.commit()
    connect.close()


@dp.message_handler(content_types=types.ContentType.TEXT)        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
async def mes(message: types.Message): 
    thread = threading.Thread(target=gpt, args=(message.text, message.from_user.id, message.message_id))        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    thread.start()
       
    
if __name__ == '__main__':
    create_table()
    executor.start_polling(dp)
